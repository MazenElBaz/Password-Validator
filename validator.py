# ----------------------
# Name: Mazen ElBaz
# Date: Sept. 2018
# ----------------------


# Global variable since it is used by both functions
SpecialCharacters = ("! # $ % & ' ( ) * + , . / : ;" +
                     "< = > ? @ [ ] ^ ` { | } ~").split()


""" Analyzes an input password to determine if it is "Secure",
    "Insecure", or "Invalid" based on the assignment description
    criteria.

    Arguments:
        password (string): a string of characters

    Returns:
        result (string): either "Secure", "Insecure", or "Invalid"."""


def validate(password):

    # Initializing the 4 variables that will be used to determine if
    # password is secure
    UpperCase, LowerCase, Digit, Special = 0, 0, 0, 0
    ForbiddenCharacters = [' ', '-', '_']

    # for loop evaluates the password argument one character at a time
    for character in password:

        # first conditional statement determines if password is invalid
        if (character in ForbiddenCharacters) or (len(password) < 8):
            return "Invalid"
        # isalpha() is used to avoid a digit satisfying the .upper() or
        # .lower() conditions
        elif character.isalpha():
            if character == character.upper():
                UpperCase = 1
            elif character == character.lower():
                LowerCase = 1
        # .numeric() returns True if the character is a digit
        elif character.isnumeric():
            Digit = 1
        # this reads through the SpecialCharacters list and returns True if
        # the character matches any of the elements in the list
        elif character in SpecialCharacters:
            Special = 1

    # All 4 conditions have to be set to 1 in order for the password to be
    # secure
    if (UpperCase == 1) and (LowerCase == 1) and (Digit == 1)\
       and (Special == 1):
        return "Secure"
    else:
        return "Insecure"

    """ Generates a password of length n which is guaranteed to
        be Secure according to the given criteria.
        Arguments:
            n (integer): the length of the password to generate, n >= 8.
        Returns:
            secure_password (string): a Secure password of length n.
        """


def generate(n):

    import random
    import string
    RandomPassword = ''
    # the first expression generates a random uppercase letter, the second
    # expression generates a random lowercase letter, the third expression
    # generates a random integer from 0 to 9, and the final expression takes
    # an element from the SpecialCharacters list randomly. The "+" is used to
    # concatenate all three characters and assign the string literal to
    # RandomPassword
    RandomPassword = random.choice(string.ascii_uppercase)

    RandomPassword = RandomPassword + random.choice(string.ascii_lowercase)

    RandomPassword = RandomPassword + str(random.randint(0, 9))

    RandomPassword = RandomPassword + random.choice(SpecialCharacters)
    # To increase the randomness of the password generated, random.sample
    # shuffles the characters in RandomPassword
    RandomPassword = ''.join(random.sample(RandomPassword,
                                           len(RandomPassword)))

    # Since the the password generated has to be n characters, the while
    # loops is used to add more charcters to RandomPassword until it has n
    # characters
    while len(RandomPassword) < int(n):

        # To increase the randomness of the password generated, this
        # generates a number to decide which type of character is to be
        # concatenated to RandomPassword next
        number = random.randint(0, 2)

        if number == 0:
            RandomPassword = RandomPassword + \
                random.choice(string.ascii_letters)
        elif number == 1:
            # str() is used to convert the integer generated by randint()
            # into a string literal so it can be concatenated to RandomPassword
            RandomPassword = RandomPassword + str(random.randint(0, 9))
        else:
            RandomPassword = RandomPassword + random.choice(SpecialCharacters)

    return RandomPassword


if __name__ == "__main__":
    # the input prompts a password from the user and it will be passed to
    # the validate function as an argument
    PasswordPrompt = validate(input())
    print(PasswordPrompt)
    # the input prompts a number from the user and it will be passed to the
    # generate function
    Number = generate(input())
    print(Number)
    # the random password returned by the generate function is passed to the
    # validate function to make sure it is secure
    print(validate(Number))
